@startuml

class Dialog {
  # dialogView: View
  + show(): void
  + dismiss(): void
}

class FirebaseAuth {
  {static} + getInstance(): FirebaseAuth
  - constructor()
  + getCurrentUser(): User?
}

class Fragment {
  - TAG: String
  # fragmentId: Long
  + onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View
  + onViewCreated(view: View, savedInstanceState: Bundle?): void
  + onPause(): void
  + onResume(): void
}

class Handler {
  - looper: Looper
  + postDelayed(runnable: Runnable, delayMillis: Long): boolean
  + removeCallbacks(runnable: Runnable): void
}

class LayoutInflater {
  {static} + from(context: Context): LayoutInflater
}

class LineItem {
  - price: String?
  - quantity: Int
  - sku: String
  - title: String?
}

class LocalDataSource {
  {static} + getInstance(): LocalDataSource
  + readFromShared(context: Context): SharedData?
}

class LoggedUserData {
  {static} + orderItemsList: List<LineItem>
  {static} + favOrderDraft: List<LineItem>
}

class ProductDetalisViewModel {
  - productInfo: Flow<ApiState<ProductModel>>
  + getProductDetalis(productId: Long): void
}

class ProductDetailsFragment {
  - binding: FragmentProductDeatilsBinding
  - imgAdapter: ImagePagerAdapter
  - productDetalisViewModel: ProductDetalisViewModel
  - productDetalisFactory: ProductDetalisFactory
  - myProduct: ProductModel
  - cartFactory: CartViewModelFactory
  - cartViewModel: CartViewModel
  - favViewModel: FavoriteViewModel
  - favFactory: FavoriteViewModelFactory
  - productIdRecived: Long
  - draftId: Long
  - noOfItems: Int
  - wishListId: Long
  - jop: Job
  - runnable: Runnable
  - handler: Handler
  + onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View
  + onViewCreated(view: View, savedInstanceState: Bundle?): void
  + removeFromFav(): void
  + onPause(): void
  + addToFav(): void
  + onResume(): void
  + addToCart(): void
  + isExist(title: String?): Pair<Boolean, Int>
  + hideComponantes(): void
  + showComponantes(): void
  + setData(): void
  + navToLoginScreen(): void
  + observeAtGetOrderDraft(): void
  + observeAtFavItems(): void
  + isAleradyFav(name: String): Boolean
}

class View {
  {static} + VISIBLE: Int
  {static} + GONE: Int
}

class ViewGroup {
}

class ImagePagerAdapter {
  - context: Context
  - imageIds: List<Image>?
  + onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder
  + onBindViewHolder(holder: ViewHolder, position: Int): void
  + getItemCount(): Int
}

class ViewHolder {
  - binding: ItemImgeBinding
}

class ItemImgeBinding {
}

class ApiState<T> {
  - loading: Boolean
  - error: Throwable?
  - data: T?
}

class ProductModel {
  - product: Product?
}

class Product {
  - title: String?
  - isFav: Boolean
  - variants: List<Variant>?
  - images: List<Image>?
  - body_html: String?
  + getTitle(): String?
  + getBodyHtml(): String?
  + isFavorite(): Boolean
  + getVariants(): List<Variant>?
  + getImages(): List<Image>?
}

class Variant {
  - title: String?
  - price: String?
  - id: Long
  + getTitle(): String?
  + getPrice(): String?
}

class Image {
  - id: Long
  - src: String?
  + getSrc(): String?
}

class Context {
}

class Looper {
}

class Runnable {
}

class SharedData {
  - orderItemsList: List<LineItem>
  - favOrderDraft: List<LineItem>
}

class User {
  + isEmailVerified(): Boolean
}

class CartViewModel {
  - _cartItemsList: MutableLiveData<MutableList<LineItem>>
  + addOrUpdateCartItems(item: LineItem): void
}

class CartViewModelFactory {
  - lineItemsDao: LineItemsDao
  + create(modelClass: Class<T>): T
}

class FavoriteViewModel {
  - _favItemsList: MutableLiveData<MutableList<LineItem>>
  + addOrUpdateFavItems(item: LineItem): void
}

class FavoriteViewModelFactory {
  - lineItemsDao: LineItemsDao
  + create(modelClass: Class<T>): T
}

class ProductDetalisFactory {
  - repository: ProductRepository
  - id: Long
  + <init>(repository: ProductRepository, id: Long)
  + create(): T
}

class ProductRepository {
  - api: ApiService
  - localDataSource: LocalDataSource
  + getProductDetails(productId: Long): Flow<ApiState<ProductModel>>
}

class ApiService {
  {static} + instance: ApiService
}

class MutableLiveData<T> {
  - value: T?
  + getValue(): T?
}

class MutableList<E> {
  + add(element: E): Boolean
}

class Pair<A, B> {
  + first: A
  + second: B
}

@enduml